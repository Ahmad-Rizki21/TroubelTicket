name: CI/CD Pipeline (Simplified)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Global environment variables
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    continue-on-error: true  # Don't fail the pipeline for security issues

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  backend-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: test_tickets
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety

    - name: Run security tests
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        pytest --cov=app tests/ --cov-report=json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          coverage.json

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run security audit
      run: |
        cd frontend
        npm audit --audit-level=high

    - name: Run type check
      run: |
        cd frontend
        npm run type-check

    - name: Build application
      run: |
        cd frontend
        npm run build

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run ESLint
      uses: eslint-action@v1
      with:
        files: frontend/src/
        extensions: js,ts,vue
        config: .eslintrc.js
      continue-on-error: true

    - name: Check code formatting
      uses: creyD/prettier_action@v4.3
      with:
        prettier_options: --check frontend/src/**/*.{js,ts,vue}
      continue-on-error: true

  deploy-staging:
    needs: [security-scan, backend-tests, frontend-tests, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploy to staging environment"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        # Add your staging deployment commands here

  deploy-production:
    needs: [security-scan, backend-tests, frontend-tests, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploy to production environment"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        # Add your production deployment commands here

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
    - name: Deployment Notification
      run: |
        echo "Deployment completed successfully!"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"