version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: tickets_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-strongrootpassword123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-tickets_db}
      MYSQL_USER: ${MYSQL_USER:-tickets_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-stronguserpassword123}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - tickets_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  backend:
    build: .
    container_name: tickets_backend
    environment:
      DATABASE_URL: mysql+pymysql://${MYSQL_USER:-tickets_user}:${MYSQL_PASSWORD:-stronguserpassword123}@mysql:3306/${MYSQL_DATABASE:-tickets_db}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-here-at-least-32-characters-long}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    ports:
      - "8000:8000"
    volumes:
      - ./static:/app/static
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - tickets_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tickets_frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - tickets_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: tickets_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-strongredispassword123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tickets_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  tickets_network:
    driver: bridge